\input texinfo  @c -*-texinfo-*-
@c %**start of header

@c @include docstyle.texi

@setfilename elisp-bytecode

@dircategory Emacs lisp
@direntry
* Bytecode Bytecode Instructions::  The Emacs Lisp Bytecode Manual.
@end direntry

@node Top
@top Emacs Lisp Bytecode Manual

@menu
* Lisp Bytecode Instructions::  Description of all Emacs Lisp Bytecode Instructions
* Opcode Table::                Table of Bytecode Instruction ordered by Opcode Number
* References::
* Instruction Index::
@end menu

@node Lisp Bytecode Instructions
@chapter Lisp Bytecode Instructions

@menu
* Argument-Packing Instructions::
* Constant Instructions::
* Return Instruction::
* Simple Instructions::
* Stack Manipulation Instructions::
* Binding Instructions::
@end menu

@node Argument-Packing Instructions
@section Argument-Packing Instructions

These instructions from opcode 1 to 47 encode an operand value from 0
to 7 as part of the opcode.  If the encoded value is 6, the actual
operand value is the byte following the opcode.  If the encoded value
is 7, the actual operand value is the two-byte number following the
opcode, in little-endian byte order.

@table @asis

@item byte-stack-ref (1--7)
@kindex byte-stack-ref
A stack reference

@item byte-varref (8--15)
@kindex byte-varref
A variable reference

@item byte-varset (16--23)
@kindex byte-varset

Sets a variable

@item byte-varbind (24--31)
@kindex byte-varbind

Binds a variable

@item byte-call (32--39)
@kindex byte-call

calls a function

@item byte-unbind (40--47)
@kindex byte-unbind

Unbinds special bindings

@end table


@node Constant Instructions
@section Constant Instructions

The instructions from opcode 192 to 255 encode a constant index from 0
to 63 as part of the opcode.  For constants outside of that range, see
instruction 129.

@table @asis

@item byte-constant (192--255)
@kindex byte-constant
A constant reference

@end table

@node Return Instruction
@section Return Instruction

@table @asis

@item byte-return (135)
@kindex byte-return
Return from function.  This is the last instruction in a function's
bytecode sequence.

@end table

@node Simple Instructions
@section Simple Instructions

These instructions use up one byte, and are followed by the next
instruction directly.  They are equivalent to calling an Emacs Lisp
function with a fixed number of arguments.

@table @asis

@item byte-nth (56)
@kindex byte-nth
Call @code{nth} with two arguments.

@item byte-symbolp (57)
@kindex byte-symbolp
Call @code{symbolp} with one argument.

@end table

@node Stack Manipulation Instructions
@section Stack Manipulation Instructions

@table @asis

@item byte-discard (136)
@kindex byte-discard
Discard one value.

@item byte-dup (137)
@kindex byte-dup
Duplicate one value.

@end table

@node Binding Instructions
@section Binding Instructions

These instructions manipulate the special-bindings stack by creating a
new binding when executed.  They need to be balanced with
@code{byte-unbind} instructions.

@table @asis

@item byte-save-excursion (138)
@kindex byte-save-excursion
Make a binding recording buffer, point, and mark.

@end table

@node Opcode Table
@chapter Opcode Table

@multitable @columnfractions .06 .30 .55
@item Code @tab Instruction @tab Description
@item 000
@tab Not used; see @code{dup}
@tab
@item 001
@tab @code{byte-stack-ref 1}
@tab stack reference 1
@item 002
@tab @code{byte-stack-ref 2}
@tab stack reference 2
@item 003
@tab @code{byte-stack-ref 3}
@tab stack reference 3
@item 004
@tab @code{byte-stack-ref 4}
@tab stack reference 4
@item 005
@tab @code{byte-stack-ref 5}
@tab stack reference 5
@item 006
@tab @code{byte-stack-ref 6}
@tab stack reference 0--255
@item 007
@tab @code{byte-stack-ref 7}
@tab stack reference 0--65535
@item 008
@tab @code{byte-varref 0}
@tab variable reference 0
@item 009
@tab @code{byte-varref 1}
@tab variable reference 1
@item 010
@tab @code{byte-varref 2}
@tab variable reference 2
@item 011
@tab @code{byte-varref 3}
@tab variable reference 3
@item 012
@tab @code{byte-varref 4}
@tab variable reference 4
@item 013
@tab @code{byte-varref 5}
@tab variable reference 5
@item 014
@tab @code{byte-varref 6}
@tab variable reference 0--255
@item 015
@tab @code{byte-varref 7}
@tab variable reference 0--65535
@item 016
@tab @code{byte-varset 0}
@tab Sets a variable
@item 017
@tab @code{byte-varset 1}
@tab Sets a variable
@item 018
@tab @code{byte-varset 2}
@tab Sets a variable
@item 019
@tab @code{byte-varset 3}
@tab Sets a variable
@item 020
@tab @code{byte-varset 4}
@tab Sets a variable
@item 021
@tab @code{byte-varset 5}
@tab Sets a variable
@item 022
@tab @code{byte-varset 6}
@tab Sets a variable
@item 023
@tab @code{byte-varset 7}
@tab Sets a variable
@item 024
@tab @code{byte-varbind}
@tab Binds a variable
@item 032
@tab @code{byte-call}
@tab Calls a function
@item 040
@tab @code{byte-unbind}
@tab Unbinds special bindings
@item 129
@tab @code{byte-constant}
@tab Load a constant 0--65535 (but generally greater than 63)
@item 192
@tab @code{byte-constant 0}
@item 193
@tab @code{byte-constant 1}
@item 194
@tab @code{byte-constant 2}
@item 195
@tab @code{byte-constant 3}
@item 196
@tab @code{byte-constant 4}
@item 197
@tab @code{byte-constant 5}
@item 198
@tab @code{byte-constant 6}
@item 199
@tab @code{byte-constant 7}
@item 200
@tab @code{byte-constant 8}
@item 201
@tab @code{byte-constant 9}
@item 202
@tab @code{byte-constant 10}
@item 203
@tab @code{byte-constant 11}
@item 204
@tab @code{byte-constant 12}
@item 205
@tab @code{byte-constant 13}
@item 206
@tab @code{byte-constant 14}
@item 207
@tab @code{byte-constant 15}
@item 208
@tab @code{byte-constant 16}
@item 209
@tab @code{byte-constant 17}
@item 210
@tab @code{byte-constant 18}
@item 211
@tab @code{byte-constant 19}
@item 212
@tab @code{byte-constant 20}
@item 213
@tab @code{byte-constant 21}
@item 214
@tab @code{byte-constant 22}
@item 215
@tab @code{byte-constant 23}
@item 216
@tab @code{byte-constant 24}
@item 217
@tab @code{byte-constant 25}
@item 218
@tab @code{byte-constant 26}
@item 219
@tab @code{byte-constant 27}
@item 220
@tab @code{byte-constant 28}
@item 221
@tab @code{byte-constant 29}
@item 222
@tab @code{byte-constant 30}
@item 223
@tab @code{byte-constant 31}
@item 224
@tab @code{byte-constant 32}
@item 225
@tab @code{byte-constant 33}
@item 226
@tab @code{byte-constant 34}
@item 227
@tab @code{byte-constant 35}
@item 228
@tab @code{byte-constant 36}
@item 229
@tab @code{byte-constant 37}
@item 230
@tab @code{byte-constant 38}
@item 231
@tab @code{byte-constant 39}
@item 232
@tab @code{byte-constant 40}
@item 233
@tab @code{byte-constant 41}
@item 234
@tab @code{byte-constant 42}
@item 235
@tab @code{byte-constant 43}
@item 236
@tab @code{byte-constant 44}
@item 237
@tab @code{byte-constant 45}
@item 238
@tab @code{byte-constant 46}
@item 239
@tab @code{byte-constant 47}
@item 240
@tab @code{byte-constant 48}
@item 241
@tab @code{byte-constant 49}
@item 242
@tab @code{byte-constant 50}
@item 243
@tab @code{byte-constant 51}
@item 244
@tab @code{byte-constant 52}
@item 245
@tab @code{byte-constant 53}
@item 246
@tab @code{byte-constant 54}
@item 247
@tab @code{byte-constant 55}
@item 248
@tab @code{byte-constant 56}
@item 249
@tab @code{byte-constant 57}
@item 250
@tab @code{byte-constant 58}
@item 251
@tab @code{byte-constant 59}
@item 252
@tab @code{byte-constant 60}
@item 253
@tab @code{byte-constant 61}
@item 254
@tab @code{byte-constant 62}
@item 255
@tab @code{byte-constant 63}
@end multitable


@node References
@chapter References

@itemize
@item @uref{http://git.savannah.gnu.org/cgit/emacs.git/tree/src/bytecode.c Execution of byte code produced by bytecomp.el}
@item @uref{http://git.savannah.gnu.org/cgit/emacs.git/tree/lisp/emacs-lisp/bytecomp.el bytecomp.el --- compilation of Lisp code into byte code}
@item @uref{http://git.savannah.gnu.org/cgit/emacs.git/tree/src/data.c data.c --- Primitive operations on Lisp data types}
@item @uref{http://nullprogram.com/blog/2014/01/04/ Emacs Byte-code Internals}
@item @uref{https://www.emacswiki.org/emacs/ByteCodeEngineering, Emacs Wiki ByteCodeEngineering}
@item @uref{https://groups.google.com/forum/#!topic/gnu.emacs.sources/oMfZT_4Oxrc easm.el --- Assembler for Emacs' bytecode interpreter}
@end itemize

@node Instruction Index
@chapter Index
@unnumbered Instruction Index
@printindex ky

@bye
