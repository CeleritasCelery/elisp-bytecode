\input texinfo  @c -*-texinfo-*-
@c %**start of header

@c @include docstyle.texi

@setfilename elisp-bytecode

@dircategory Emacs lisp
@direntry
* Bytecode Bytecode Instructions::  The Emacs Lisp Bytecode Manual.
@end direntry

@node Top
@top Emacs Lisp Bytecode Manual

@menu
* Lisp Bytecode Instructions::  Description of all Emacs Lisp Bytecode Instructions
* Opcode Table::                Table of Bytecode Instruction ordered by Opcode Number
* References::
* Instruction Index::
@end menu

@node Lisp Bytecode Instructions
@chapter Lisp Bytecode Instructions

@menu
* Argument-Packing Instructions::
* Constant Instructions::
* Return Instruction::
* Simple Instructions::
* Stack Manipulation Instructions::
* Binding Instructions::
@end menu

@node Argument-Packing Instructions
@section Argument-Packing Instructions

These instructions from opcode 1 to 47 encode an operand value from 0
to 7 as part of the opcode.  If the encoded value is 6, the actual
operand value is the byte following the opcode.  If the encoded value
is 7, the actual operand value is the two-byte number following the
opcode, in little-endian byte order.

@table @asis

@item byte-stack-ref (1--7)
@kindex byte-stack-ref
A stack reference

@item byte-varref (8--15)
@kindex byte-varref
A variable reference

@item byte-varset (16--23)
@kindex byte-varset

Sets a variable

@item byte-varbind (24--31)
@kindex byte-varbind

Binds a variable

@item byte-call (32--39)
@kindex byte-call

Calls a function.  The opcode argument specifies the number of
arguments to pass to the function from the stack, excluding the
function itself.  Thus, @code{(exchange-point-and-mark)} generates:

@verbatim
PC byte Instruction
0  192  (byte-constant exchange-point-and-mark)
1   32  (byte-call . 0)
2  135  (byte-return . 0)
@end verbatim

@item byte-unbind (40--47)
@kindex byte-unbind

Unbinds special bindings

@end table


@node Constant Instructions
@section Constant Instructions

The instructions from opcode 192 to 255 encode a constant index from 0
to 63 as part of the opcode.  For constants outside of that range, see
instruction 129.

@table @asis

@item byte-constant (192--255)
@kindex byte-constant
A constant reference, usually greater than 63; there are special instructions
to load constants from 0 to 63.

@end table

@node Return Instruction
@section Return Instruction

@table @asis

@item byte-return (135)
@kindex byte-return
Return from function.  This is the last instruction in a function's
bytecode sequence.

@end table

@node Simple Instructions
@section Simple Instructions

These instructions use up one byte, and are followed by the next
instruction directly.  They are equivalent to calling an Emacs Lisp
function with a fixed number of arguments.

@table @asis

@item byte-nth (56)
@kindex byte-nth
Call @code{nth} with two arguments.

@item byte-symbolp (57)
@kindex byte-symbolp
Call @code{symbolp} with one argument.

@end table

@node Stack Manipulation Instructions
@section Stack Manipulation Instructions

@table @asis

@item byte-discard (136)
@kindex byte-discard
Discard one value.

@item byte-dup (137)
@kindex byte-dup
Duplicate one value.

@end table

@node Binding Instructions
@section Binding Instructions

These instructions manipulate the special-bindings stack by creating a
new binding when executed.  They need to be balanced with
@code{byte-unbind} instructions.

@table @asis

@item byte-save-excursion (138)
@kindex byte-save-excursion
Make a binding recording buffer, point, and mark.

@end table

@node Opcode Table
@chapter Opcode Table

@multitable @columnfractions .06 .30 .55
@item Code @tab Instruction @tab Description
@item @verb{|  0|}
@tab Not used; see @code{dup}
@tab
@item @verb{|  1|}
@tab @code{byte-stack-ref 1}
@tab stack reference 1
@item @verb{|  2|}
@tab @code{byte-stack-ref 2}
@tab stack reference 2
@item @verb{|  3|}
@tab @code{byte-stack-ref 3}
@tab stack reference 3
@item @verb{|  4|}
@tab @code{byte-stack-ref 4}
@tab stack reference 4
@item @verb{|  5|}
@tab @code{byte-stack-ref 5}
@tab stack reference 5
@item @verb{|  6|}
@tab @code{byte-stack-ref 6}
@tab stack reference 0--255
@item @verb{|  7|}
@tab @code{byte-stack-ref 7}
@tab stack reference 0--65535
@item @verb{|  8|}
@tab @code{byte-varref 0}
@tab variable reference 0
@item @verb{|  9|}
@tab @code{byte-varref 1}
@tab variable reference 1
@item @verb{| 10|}
@tab @code{byte-varref 2}
@tab variable reference 2
@item @verb{| 11|}
@tab @code{byte-varref 3}
@tab variable reference 3
@item @verb{| 12|}
@tab @code{byte-varref 4}
@tab variable reference 4
@item @verb{| 13|}
@tab @code{byte-varref 5}
@tab variable reference 5
@item @verb{| 14|}
@tab @code{byte-varref 6}
@tab variable reference 0--255 (usually greater than 5)
@item @verb{| 15|}
@tab @code{byte-varref 7}
@tab variable reference 0--65535 (usually greater than 255)
@item @verb{| 16|}
@tab @code{byte-varset 0}
@tab Sets a variable
@item @verb{| 17|}
@tab @code{byte-varset 1}
@tab Sets a variable
@item @verb{| 18|}
@tab @code{byte-varset 2}
@tab Sets a variable
@item @verb{| 19|}
@tab @code{byte-varset 3}
@tab Sets a variable
@item @verb{| 20|}
@tab @code{byte-varset 4}
@tab Sets a variable
@item @verb{| 21|}
@tab @code{byte-varset 5}
@tab Sets a variable
@item @verb{| 22|}
@tab @code{byte-varset 6}
@tab Sets a variable
@item @verb{| 23|}
@tab @code{byte-varset 7}
@tab Sets a variable
@item @verb{| 24|}
@tab @code{byte-varbind}
@tab Binds a variable
@item @verb{| 32|}
@tab @code{byte-call}
@tab Calls a function
@item @verb{| 40|}
@tab @code{byte-unbind}
@tab Unbinds special bindings
@item @verb{| 51|}
@tab @tab Unused
@item @verb{| 52|}
@tab @tab Unused
@item @verb{| 53|}
@tab @tab Unused
@item @verb{| 54|}
@tab @tab Unused
@item @verb{| 55|}
@tab @tab Unused
@item @verb{| 56|}
@tab @code{byte-nth}
@tab Call @code{nth} with two arguments.
@item @verb{| 57|}
@tab @code{byte-symbolp}
@tab Call @code{symbolp} with one argument.
@item @verb{|129|}
@tab @code{byte-constant}
@tab Load a constant 0--65535 (but generally greater than 63)
@item @verb{|136|}
@tab @code{byte-discard}
@tab Discard top stack value
@item @verb{|137|}
@tab @code{byte-discard}
@tab Duplicate top stack value
@item @verb{|138|}
@tab @code{byte-save-excursion}
@tab Make a binding recording buffer, point, and mark.
@item @verb{|192|}
@tab @code{byte-constant 0}
@item @verb{|193|}
@tab @code{byte-constant 1}
@item @verb{|194|}
@tab @code{byte-constant 2}
@item @verb{|195|}
@tab @code{byte-constant 3}
@item @verb{|196|}
@tab @code{byte-constant 4}
@item @verb{|197|}
@tab @code{byte-constant 5}
@item @verb{|198|}
@tab @code{byte-constant 6}
@item @verb{|199|}
@tab @code{byte-constant 7}
@item @verb{|200|}
@tab @code{byte-constant 8}
@item @verb{|201|}
@tab @code{byte-constant 9}
@item @verb{|202|}
@tab @code{byte-constant 10}
@item @verb{|203|}
@tab @code{byte-constant 11}
@item @verb{|204|}
@tab @code{byte-constant 12}
@item @verb{|205|}
@tab @code{byte-constant 13}
@item @verb{|206|}
@tab @code{byte-constant 14}
@item @verb{|207|}
@tab @code{byte-constant 15}
@item @verb{|208|}
@tab @code{byte-constant 16}
@item @verb{|209|}
@tab @code{byte-constant 17}
@item @verb{|210|}
@tab @code{byte-constant 18}
@item @verb{|211|}
@tab @code{byte-constant 19}
@item @verb{|212|}
@tab @code{byte-constant 20}
@item @verb{|213|}
@tab @code{byte-constant 21}
@item @verb{|214|}
@tab @code{byte-constant 22}
@item @verb{|215|}
@tab @code{byte-constant 23}
@item @verb{|216|}
@tab @code{byte-constant 24}
@item @verb{|217|}
@tab @code{byte-constant 25}
@item @verb{|218|}
@tab @code{byte-constant 26}
@item @verb{|219|}
@tab @code{byte-constant 27}
@item @verb{|220|}
@tab @code{byte-constant 28}
@item @verb{|221|}
@tab @code{byte-constant 29}
@item @verb{|222|}
@tab @code{byte-constant 30}
@item @verb{|223|}
@tab @code{byte-constant 31}
@item @verb{|224|}
@tab @code{byte-constant 32}
@item @verb{|225|}
@tab @code{byte-constant 33}
@item @verb{|226|}
@tab @code{byte-constant 34}
@item @verb{|227|}
@tab @code{byte-constant 35}
@item @verb{|228|}
@tab @code{byte-constant 36}
@item @verb{|229|}
@tab @code{byte-constant 37}
@item @verb{|230|}
@tab @code{byte-constant 38}
@item @verb{|231|}
@tab @code{byte-constant 39}
@item @verb{|232|}
@tab @code{byte-constant 40}
@item @verb{|233|}
@tab @code{byte-constant 41}
@item @verb{|234|}
@tab @code{byte-constant 42}
@item @verb{|235|}
@tab @code{byte-constant 43}
@item @verb{|236|}
@tab @code{byte-constant 44}
@item @verb{|237|}
@tab @code{byte-constant 45}
@item @verb{|238|}
@tab @code{byte-constant 46}
@item @verb{|239|}
@tab @code{byte-constant 47}
@item @verb{|240|}
@tab @code{byte-constant 48}
@item @verb{|241|}
@tab @code{byte-constant 49}
@item @verb{|242|}
@tab @code{byte-constant 50}
@item @verb{|243|}
@tab @code{byte-constant 51}
@item @verb{|244|}
@tab @code{byte-constant 52}
@item @verb{|245|}
@tab @code{byte-constant 53}
@item @verb{|246|}
@tab @code{byte-constant 54}
@item @verb{|247|}
@tab @code{byte-constant 55}
@item @verb{|248|}
@tab @code{byte-constant 56}
@item @verb{|249|}
@tab @code{byte-constant 57}
@item @verb{|250|}
@tab @code{byte-constant 58}
@item @verb{|251|}
@tab @code{byte-constant 59}
@item @verb{|252|}
@tab @code{byte-constant 60}
@item @verb{|253|}
@tab @code{byte-constant 61}
@item @verb{|254|}
@tab @code{byte-constant 62}
@item @verb{|255|}
@tab @code{byte-constant 63}
@end multitable


@node References
@chapter References

@itemize
@item @uref{http://git.savannah.gnu.org/cgit/emacs.git/tree/src/bytecode.c Execution of byte code produced by bytecomp.el}
@item @uref{http://git.savannah.gnu.org/cgit/emacs.git/tree/lisp/emacs-lisp/bytecomp.el bytecomp.el --- compilation of Lisp code into byte code}
@item @uref{http://git.savannah.gnu.org/cgit/emacs.git/tree/src/data.c data.c --- Primitive operations on Lisp data types}
@item @uref{http://nullprogram.com/blog/2014/01/04/ Emacs Byte-code Internals}
@item @uref{https://www.emacswiki.org/emacs/ByteCodeEngineering, Emacs Wiki ByteCodeEngineering}
@item @uref{https://groups.google.com/forum/#!topic/gnu.emacs.sources/oMfZT_4Oxrc easm.el --- Assembler for Emacs' bytecode interpreter}
@end itemize

@node Instruction Index
@chapter Index
@unnumbered Instruction Index
@printindex ky

@bye
