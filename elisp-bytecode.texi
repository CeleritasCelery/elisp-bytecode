\input texinfo  @c -*-texinfo-*-
@c %**start of header

@c @include docstyle.texi

@setfilename elisp-bytecode

@dircategory Emacs lisp
@direntry
* Lisp Bytecode Instructions::  The Emacs Lisp Bytecode Manual.
@end direntry

@node Top
@top Emacs Lisp Bytecode Manual

@menu
* Introduction to Elisp Bytecode and LAP::
* ELisp Bytecode Instructions::  Description of all Emacs Lisp Bytecode Instructions
* Opcode Table::                Table of Bytecode Instruction ordered by Opcode Number
* References::
* Instruction Index::
@end menu

@node Introduction to Elisp Bytecode and LAP
@chapter Introduction to Elisp Bytecode and LAP

@menu
* Why is ELisp Bytecode important and how is Emacs as a program different?::
* ELisp Bytecode and LAP::
* Emacs Lisp Virtual Machine::
* The Byte-code Function Literal::
@end menu

@node Why is ELisp Bytecode important and how is Emacs as a program different?
@section Why is ELisp Bytecode important and how is Emacs as a program different?

If you were to look at two comparable complex programs circa 2018,
Firefox 53.0.3 and Emacs 25.3, you would see that relative sizes of Firefox
tarball is 5 times bigger than for Emacs. But how are these made up,
or what languages are they comprised of?

For Firefox whose core is written in C++ we have:

@verbatim
$ cloc --match-f='\.(js|c|cpp|html|py|css)$' firefox-53.0.3
   89156 text files.
   86240 unique files.
    1512 files ignored.

cloc v 1.60  T=244.20 s (353.2 files/s, 56012.8 lines/s)
-------------------------------------------------------------
Language                     files     comment           code
-------------------------------------------------------------
C++                           7267      418019        3057110
Javascript                   25855      532629        2859451
HTML                         45311      120520        2209067
C                             3482      400594        1664666
@end verbatim

And for Emacs whose core is written in C we have:

@verbatim
$ cloc emacs-25.3.tar.xz
    3346 text files.
    3251 unique files.
    1130 files ignored.

cloc 1.60  T=13.85 s (160.1 files/s, 154670.7 lines/s)
-------------------------------------------------------------------
Language                      files     comment           code
--------------------------------------------------------------
Lisp                           1616      200820        1270511
C                               255       66169         256314
C/C++ Header                    176       11505          34891
@end verbatim

If you look at the relative ratio of C++ versus Javascript code in
Firefox, and the ratio of C versus Lisp code in Emacs, you'll see that
there is much more of Emacs written in Lisp than say of Firefox
written in Javascript. (And if you look at the C code for Emacs, a lot
of it looks like Lisp written using C syntax). My take is that Emacs a
lot more orthogonal in its basic concepts and construction. Just as
Leibniz was amazed that such diversity could come out of such simple
rules of mathematics and physics, so it is remarkable that something
as complex as Emacs can come out of the relatively simple language
Lisp.

@node ELisp Bytecode and LAP
@section ELisp Bytecode and LAP

However pervasively used, Emacs Lisp (Elisp) is in making up the Emacs
ecosystem, ELisp is not and never has been a speedy language compared
to say, C, C++, Go, Rust, or Java. And that's where LAP and bytecode
come in.

As stated in a commment in @code{byte-opt.el} added circa 1996:
@quotation
No matter how hard you try, you can't make a racehorse out of a pig.

You can, however, make a faster pig.
@author Eric Naggum
@end quotation

ELisp bytecode is the custom lower-level language used by Emacs'
bytecode interpreter. As with all bytecode, bytecode instructions are
compact. For display purposes, there is a @code{disassemble} command
that unpacks the fields of the instruction. With this and using the
constants vector, bytecode can be printed in an assembly-language-like
format.

I'll often use Elisp bytecode instruction refer to an assembly
representation of an Elisp bytecode instruction.

LAP stands for Lisp Assembly Program. It seems to be an internal
representation of bytecode in a more symbolic form. It is used behind
the scenes to that make bytecode more amenable to optimization, since
the instructions are in a structure which is easier to operate on.

@uref{https://www.gnu.org/software/emacs/manual/html_node/elisp/Speed-of-Byte_002dCode.html,
Silly Loop Example} in the Emacs Lisp Manual gives a program to time
running in some code Bytecode interpreter versus running the code in the
Lisp interpreter. When I ran this program, bytecode ran 2.5 times
faster. The Emacs Lisp manual gets a speed improvement of about 3
times.

@node Emacs Lisp Virtual Machine
@section Emacs Lisp Virtual Machine

The Emacs Lisp bytecode interpreter, like many bytecode interpreters
such as Smalltalk, C Python, Forth, or PostScript, has an evaluation
stack and a code stack.  Emacs Lisp Bytecode uses Reverse Polish
Notation which is how many other bytecode interpreters work. It is the
opposite of the way Lisp works. In Lisp, the operator or function
comes first and the operands for the function come last. Thus, to add
the values of two variables we might write @code{(+ a b)}. However in
bytecode it is the other way around: the operator or function comes
last. So the corresponding bytecode is:

@verbatim
0	varref	  a
1	varref	  b
2	plus
@end verbatim

As in most language-specific virtual machines, but in contrast to a
typical a number of general-purpose virtual machines, the things that
are on the evaluation stack are the same objects as found in the
system that they model. Here, these objects can include Emacs buffers,
or font faces, Lisp objects like hashes or vectors, or simply (30-bit)
Lisp integers. Compare this with say LLVM IR, or JVM instructions
where the underlying objects on the stack are registers which can act
as pointers and the internal memory layout of objects is exposed.

Control flow in Lisp bytecode is similar to a conventional assembly
language: there are unconditional and conditional jumps. More complex
control structures are simply built out of this.

Although it may be obvious, one last thing I'd like to point out is
that the Elisp bytecode instruction set is custom to Emacs.  In
addition to primitives that you'd expect for Lisp like ``car'' and
``cdr'', there are primitive bytecodes for more complex Emacs
editor-specific concepts like ``save-excusion''@footnote{The fact that
the semantic level difference between Emacs Lisp and its bytecode is
not great makes writing a decompiler for it more feasible than if the
bytecode language were of a general nature such as say LLVM IR.}.

The interpreter is largely backwards compatible, but not forwards
compatible@footnote{well, eventually old Elisp bytecode instructions
@emph{do} die}. So old versions of Emacs can’t run new
byte-code. Each instruction is between 1 and 3 bytes. The first byte
is the opcode and the second and third bytes are either a single
operand or a single intermediate value. Some operands are packed into
the opcode byte.


@node The Byte-code Function Literal
@section The Byte-code Function Literal

@emph{This section is largely lifted from Chris Wellon's Emacs
Byte-code Internals.  See references at the end of this doc.}

A byte-code object is functionally equivalent to a normal Elisp vector
except that it can be evaluated as a function. Elements are accessed
in constant time, the syntax is similar to vector syntax
(@verb{|[...]|} vs. @verb{|#[...]|}), and it can be of any length,
though valid functions must have 4 to 6 elements where the elements
have a particular structure elaborated on below.

There are two ways to create a byte-code object: using a byte-code
object literal or with @code{make-byte-code}. Like vector literals,
byte-code functions don’t need to be quoted.

Examples of calling @code{make-byte-code}:
@verbatim
(make-byte-code 0 "" [] 0)
;; => #[0 "" [] 0]

#[1 2 3 4]
;; => #[1 2 3 4]

(#[0 "" [] 0])
;; error: Invalid byte opcode
@end verbatim

The elements of a bytecode function literal are:
@iftex
@enumerate
@item Function parameter (lambda) list
@item Byte-code Unibyte String
@item Constants Vector
@item Maximum Stack Usage
@item Docstring
@item Interactive Specification
@end enumerate
@end iftex
@menu
* Function parameter (lambda) list::
* Byte-code Unibyte String::
* Constants Vector::
* Maximum Stack Usage::
* Docstring::
* Interactive Specification::
@end menu

@node Function parameter (lambda) list
@unnumberedsubsec Function Parameter List

The first element of a bytecode-function literal is the parameter list
for the @code{defun}. The object takes on two different forms
depending on whether the function is lexically or dynamically scoped. If
the function is dynamically scoped, the argument list is exactly what
appears in Lisp code.

@subsubsection Example showing how a parameter list is transformed:
@verbatim
(byte-compile (lambda (a b &optional c)))
;; => #[(a b &optional c) "\300\207" [nil] 1]
@end verbatim

There’s really no shorter way to represent the parameter list because
preserving the argument names is critical. Remember that, in dynamic
scope, while the function body is being evaluated these variables are
globally bound (eww!) to the function’s arguments.

On the other hand, when the function is lexically scoped, the
parameter list is packed into an Elisp integer, indicating the counts
of the different kinds of parameters: required, @verb{|&optional|},
and @verb{|&rest|}. No variable names are needed.

The following shows how parameter counts and flags are encoded:

@image{elisp-params-small,,,,.png}

The least significant 7 bits indicate the number of required
arguments. Notice that this limits compiled, lexically-scoped
functions to 127 required arguments. The 8th bit is the number of
&rest arguments (up to 1). The remaining bits indicate the total
number of optional and required arguments (not counting &rest). It’s
really easy to parse these in your head when viewed as hexadecimal
because each portion almost always fits inside its own ``digit.''

Examples showing how lexical parameters are encoded:
@verbatim
(byte-compile-make-args-desc '())
;; => #x000  (0 args, 0 rest, 0 required)

(byte-compile-make-args-desc '(a b))
;; => #x202  (2 args, 0 rest, 2 required)

(byte-compile-make-args-desc '(a b &optional c))
;; => #x302  (3 args, 0 rest, 2 required)

(byte-compile-make-args-desc '(a b &optional c &rest d))
;; => #x382  (3 args, 1 rest, 2 required)
@end verbatim

The names of the arguments don’t matter in lexical scope: they’re
purely positional. This tighter argument specification is one of the
reasons lexical scope is faster: the byte-code interpreter doesn’t
need to parse the entire lambda list and assign all of the variables
on each function invocation; furthermore, variable access is via a
compact index located usually in the operand value rather than an
index into the constants vector followed by a lookup of the variable.

@node Byte-code Unibyte String
@unnumberedsubsec Byte-code Unibyte String

The second element of a bytecode-function literal is a unibyte string
--- it strictly holds octets and is not to be interpreted as any sort
of Unicode encoding. These strings should be created with
unibyte-string because string may return a multibyte string. To
disambiguate the string type to the lisp reader when higher values are
present (> 127), the strings are printed in an escaped octal notation,
keeping the string literal inside the ASCII character set.

@subsubsection Example of a unibyte string:
@verbatim
(unibyte-string 100 200 250)
;; => "d\310\372"
@end verbatim

It’s unusual to see a byte-code string that doesn’t end with 135
(#o207, byte-return). Perhaps this should have been implicit? I’ll
talk more about the byte-code below.

@node Constants Vector
@unnumberedsubsec Constants Vector

The third object in a bytecode-function literal is a ``constants''
vector; it lists all of the symbols and constants used the function
and referred to in its instructions.

Byte-code has a limited number of kinds of operand. Most operands are
only a few bits in length, some fill an entire byte, and occasionally
an operand can be two bytes in length. Generally you can't have an
arbitrary symbol or structured constant listed directly inside an
operand. So instead, operands reference either the constant vector or
they index into the stack itself. Given this, the constant vector is
pretty hefty.

It’s a normal Elisp vector and can be created with vector or a vector
literal.

@subsubsection showing a constant vector:
@verbatim
ELISP> (byte-compile (lambda (a b) (my-func '("hi" "there") a nil 5)))
#[(a b)
  "\301\302\303\304$\207"
  [a my-func
     ("hi" "there")
     nil 5]
  5]
@end verbatim

The constant vector in the above example contains 5 elements:
@itemize
@item @code{a} --- the variable symbol ``a''; note that ``b'' is not listed
@item @code{myfunc} the external function symbol ``myfunc''
@item @code{("hi" "there")} a list constant containing two strings
@item @code{nil} the nil constant
@item @code{5} the integer constant 5
@end itemize

If this were a lexically-scoped function, the constants vector wouldn’t
have the variable symbol ``a'' listed.

@node Maximum Stack Usage
@unnumberedsubsec Maximum Stack Usage

The fourth object in a bytecode-function literal is an integer which gives
the maximum stack space used by this byte-code. This value can be
derived from the byte-code itself, but it’s pre-computed so that the
byte-code interpreter can quickly check for stack
overflow. Under-reporting this value is probably another way to crash
Emacs.

@node Docstring
@unnumberedsubsec Docstring

The fifth object in a bytecode-function literal is simple and completely
optional: it’s either the docstring itself, or if the docstring is
especially large it’s a cons cell indicating a compiled `.elc` and a
position for lazy access. Only one position, the start, is needed
because the lisp reader is used to load it and it knows how to
recognize the end.

@node Interactive Specification
@unnumberedsubsec ``Interactive'' Specification

The last object in a bytecode-function literal is, like the docstring,
optional. If it is present and non-nil then the function is an
``interactive'' function. It holds the exactly contents of the
argument to @code{interactive} in the uncompiled function definition.

@subsubsection Examples showing the interactive specification:
@verbatim
(byte-compile (lambda (n) (interactive "nNumber: ") n))
;; => #[(n) "\010\207" [n] 1 nil "nNumber: "]

(byte-compile (lambda (n) (interactive (list (read))) n))
;; => #[(n) "\010\207" [n] 1 nil (list (read))]
@end verbatim

The interactive expression is always interpreted, and never
byte-compiled. This is usually fine because, by definition, this code
is going to be waiting on user input. However, it slows down keyboard
macro playback.


@node ELisp Bytecode Instructions
@chapter ELisp Bytecode Instructions

@menu
* Argument-Packing Instructions::
* Constants-Vector Retrieval Instructions::
* Return Instruction::
* Simple Instructions::
* Stack Manipulation Instructions::
* Binding Instructions::
@end menu

@node Argument-Packing Instructions
@section Argument-Packing Instructions

These instructions from opcode 1 to 47 encode an operand value from 0
to 7 as part of the opcode.  If the encoded value is 6, the actual
operand value is the byte following the opcode.  If the encoded value
is 7, the actual operand value is the two-byte number following the
opcode, in little-endian byte order.

@menu
* byte-stack-ref::
* byte-varref::
* byte-varset::
* byte-varbind::
* byte-call::
* byte-unbind::
@end menu

@node byte-stack-ref
@unnumberedsubsec @code{byte-stack-ref} (1--7)
@kindex byte-stack-ref

A stack reference

@node byte-varref
@unnumberedsubsec @code{byte-varref} (8--15)
@kindex byte-varref
Pushes the value of a variable reference onto the evaluation stack.

@subsubsection Example

When dynamic binding is in effect, @code{(defun en(n) n)} generates:
@verbatim
PC  Byte  Instruction
 0    8   (byte-varref n)  ;; loads variable n onto the stack
 1  135   (byte-return . 0)

Constant Vector: [n]
@end verbatim

@node byte-varset
@unnumberedsubsec @code{byte-varset} (16--23)
@kindex byte-varset

Sets a variable given in the operand to the value that is on the top
of the stack.

@subsubsection Example

When dynamic binding is in effect, @code{(defun n5(n) (setq n 5))} generates:
@verbatim
PC  Byte  Instruction
 0  193   (byte-constant 5)
 1  137   (byte-dup . 0)
 2   16   (byte-varset n) ;; sets variable n
 3  135   (byte-return . 0)

Constant Vector: [n 5]
@end verbatim

@node byte-varbind
@unnumberedsubsec @code{byte-varbind} (24--31)
@kindex byte-varbind

Binds a variable

@node byte-call
@unnumberedsubsec @code{byte-call} (32--39)
@kindex byte-call

Calls a function.  The opcode argument specifies the number of
arguments to pass to the function from the stack, excluding the
function itself.

@subsubsection Example

@code{(exchange-point-and-mark)} generates:
@verbatim
PC  Byte  Instruction
 0  192   (byte-constant exchange-point-and-mark)
 1   32   (byte-call . 0)
 2  135   (byte-return . 0)

Constant Vector: [exchange-point-and-mark]
@end verbatim

@node byte-unbind
@unnumberedsubsec @code{byte-unbind} (40--47)
@kindex byte-unbind

Unbinds special bindings

@node Constants-Vector Retrieval Instructions
@section Constants-Vector Retrieval Instructions

The instructions from opcode 192 to 255 push a value from the
Constants Vector. @xref{Constants Vector}. Opcode 192 pushes the first
entry, opcode 193, the second and so on. If there are more than 64
constants, opcode @code{byte-constant2} (opcode 129) is used instead.

@menu
* byte-constant::
* byte-constant2::
@end menu

@node byte-constant
@unnumberedsubsec @code{byte-constant} (192--255)
@kindex byte-constant

Pushes a value from the constants vector on the evaluation stack.
There are special instructions to push any one of the first
64 entries in the constants stack.

@subsubsection Example
@code{(defun n3(n) (+ n 10 11 12))} generates:
@verbatim
PC  Byte  Instruction
 0  193   (byte-constant +)
 1    8   (byte-varref n)
 2  194   (byte-constant 10)
 3  195   (byte-constant 11)
 4  196   (byte-constant 12)
 5   36   (byte-call . 4)
 6  135   (byte-return . 0)

Constant Vector: [n + 10 11 12]
@end verbatim

@node byte-constant2
@unnumberedsubsec @code{byte-constant2} (129)
@kindex byte-constant2

Pushes a value from the constants vector on the evaluation stack.
Although there are special instructions to push any one of the first
64 entries in the constants stack, this instruction is needed to push
a value beyond one the first 64 entries.

@code{(defun n64(n) (+ n 0 1 2 3 .. 64 ))} generates
@verbatim
PC  Byte  Instruction
 0  193   (byte-constant +)
 1    8   (byte-varref n)
 2  194   (byte-constant 0)
 3  195   (byte-constant 1)
 4  196   (byte-constant 2)
 5  197   (byte-constant 3)
 ...
66  129   (byte-constant 64)
          64
           0
71  135   (byte-return . 0)
@end verbatim

@node Return Instruction
@section Return Instruction

@unnumberedsubsec @code{byte-return} (135)
@kindex byte-return
Return from function.  This is the last instruction in a function's
bytecode sequence. The top value on the evaluation stack is the return value.

@subsubsection Example
@code{(defun one(n) 1)} generates:
@verbatim
PC  Byte  Instruction
 0  192   (byte-constant 1)
 1  135   (byte-return . 0)

Constant Vector: [1]
@end verbatim

@node Simple Instructions
@section Simple Instructions

These instructions use up one byte, and are followed by the next
instruction directly.  They are equivalent to calling an Emacs Lisp
function with a fixed number of arguments: the arguments are popped
from the stack, and a single return value is pushed back onto the
stack.

@menu
* byte-nth::
* byte-symbolp::
* byte-consp::
* byte-stringp::
* byte-listp::
* byte-eq::
* byte-memq::
* byte-not::
* byte-car::
* byte-cdr::
* byte-cons::
* byte-list1::
* byte-list2::
* byte-list3::
* byte-list4::
* byte-length::
* byte-aref::
* byte-aset::
* byte-symbol-value::
* byte-symbol-function::
* byte-set::
* byte-fset::
* byte-get::
* byte-substring::
* byte-concat2::
* byte-concat3::
* byte-concat4::
* byte-sub1::
* byte-add1::
* byte-eqlsign::
* byte-gtr::
* byte-lss::
* byte-leq::
* byte-geq::
* byte-diff::
* byte-negate::
* byte-plus::
* byte-mult::
* byte-max::
* byte-min::
* byte-point::
* byte-goto-char::
* byte-insert::
* byte-point-min::
* byte-point-max::
* byte-char-after::
* byte-following-char::
* byte-preceding-char::
* byte-current-column::
* byte-eolp::
* byte-eobp::
* byte-bolp::
* byte-bobp::
* byte-current-buffer::
* byte-set-buffer::
* byte-forward-char::
* byte-forward-word::
* byte-skip-chars-forward::
* byte-skip-chars-backward::
* byte-forward-line::
* byte-char-syntax::
* byte-buffer-substring::
* byte-delete-region::
* byte-narrow-to-region::
* byte-widen::
* byte-end-of-line::
* byte-save-excursion::
* byte-set-marker::
* byte-match-beginning::
* byte-match-end::
* byte-upcase::
* byte-downcase::
* byte-stringeqlsign::
* byte-stringlss::
* byte-equal::
* byte-nthcdr::
* byte-elt::
* byte-member::
* byte-assq::
* byte-nreverse::
* byte-setcar::
* byte-setcdr::
* byte-car-safe::
* byte-cdr-safe::
* byte-nconc::
* byte-quo::
* byte-rem::
* byte-numberp::
* byte-integerp::
@end menu

@node byte-nth
@unnumberedsubsec @code{byte-nth} (56)
@kindex byte-nth
Call @code{nth} with two arguments.

@node byte-symbolp
@unnumberedsubsec @code{byte-symbolp} (57)
@kindex byte-symbolp
Call @code{symbolp} with one argument.

@node byte-consp
@unnumberedsubsec @code{byte-consp} (58)
@kindex byte-consp
Call @code{consp} with one argument.

@node byte-stringp
@unnumberedsubsec @code{byte-stringp} (59)
@kindex byte-stringp
Call @code{stringp} with one argument.

@node byte-listp
@unnumberedsubsec @code{byte-listp} (60)
@kindex byte-listp
Call @code{listp} with one argument.

@node byte-eq
@unnumberedsubsec @code{byte-eq} (61)
@kindex byte-eq
Call @code{eq} with two arguments.

@node byte-memq
@unnumberedsubsec @code{byte-memq} (62)
@kindex byte-memq
Call @code{memq} with two arguments.

@node byte-not
@unnumberedsubsec @code{byte-not} (63)
@kindex byte-not
Call @code{not} with one argument.

@node byte-car
@unnumberedsubsec @code{byte-car} (64)
@kindex byte-car
Call @code{car} with one argument.

@node byte-cdr
@unnumberedsubsec @code{byte-cdr} (65)
@kindex byte-cdr
Call @code{cdr} with one argument.

@node byte-cons
@unnumberedsubsec @code{byte-cons} (66)
@kindex byte-cons
Call @code{cons} with two arguments.

@node byte-list1
@unnumberedsubsec @code{byte-list1} (67)
@kindex byte-list1
Call @code{list} with one argument.

@node byte-list2
@unnumberedsubsec @code{byte-list2} (68)
@kindex byte-list2
Call @code{list} with two arguments.

@node byte-list3
@unnumberedsubsec @code{byte-list3} (69)
@kindex byte-list3
Call @code{list} with three arguments.

@node byte-list4
@unnumberedsubsec @code{byte-list4} (70)
@kindex byte-list4
Call @code{list} with four arguments.

@node byte-length
@unnumberedsubsec @code{byte-length} (71)
@kindex byte-length
Call @code{length} with one argument.

@node byte-aref
@unnumberedsubsec @code{byte-aref} (72)
@kindex byte-aref
Call @code{aref} with two arguments.

@node byte-aset
@unnumberedsubsec @code{byte-aset} (73)
@kindex byte-aset
Call @code{aset} with three arguments.

@node byte-symbol-value
@unnumberedsubsec @code{byte-symbol-value} (74)
@kindex byte-symbol-value
Call @code{symbol-value} with one argument.

@node byte-symbol-function
@unnumberedsubsec @code{byte-symbol-function} (75)
@kindex byte-symbol-function
Call @code{symbol-function} with one argument.

@node byte-set
@unnumberedsubsec @code{byte-set} (76)
@kindex byte-set
Call @code{set} with two arguments.

@node byte-fset
@unnumberedsubsec @code{byte-fset} (77)
@kindex byte-fset
Call @code{fset} with two arguments.

@node byte-get
@unnumberedsubsec @code{byte-get} (78)
@kindex byte-get
Call @code{get} with two arguments.

@node byte-substring
@unnumberedsubsec @code{byte-substring} (79)
@kindex byte-substring
Call @code{substring} with three arguments.

@node byte-concat2
@unnumberedsubsec @code{byte-concat2} (80)
@kindex byte-concat2
Call @code{concat} with two arguments.

@node byte-concat3
@unnumberedsubsec @code{byte-concat3} (81)
@kindex byte-concat3
Call @code{concat} with three arguments.

@node byte-concat4
@unnumberedsubsec @code{byte-concat4} (82)
@kindex byte-concat4
Call @code{concat} with four arguments.

@node byte-sub1
@unnumberedsubsec @code{byte-sub1} (83)
@kindex byte-sub1
Call @code{1-} with one argument, subtracting one from the top-of-stack value.

@node byte-add1
@unnumberedsubsec @code{byte-add1} (84)
@kindex byte-add1
Call @code{1+} with one argument, adding one to the top-of-stack value.

@node byte-eqlsign
@unnumberedsubsec @code{byte-eqlsign} (85)
@kindex byte-eqlsign
Call @code{=} with two arguments, comparing the two values at the top of the stack for numerical or strict equality.

@node byte-gtr
@unnumberedsubsec @code{byte-gtr} (86)
@kindex byte-gtr
Call @code{>} with two arguments, comparing the two values at the top of the stack with the numerical greater-than relation.

@node byte-lss
@unnumberedsubsec @code{byte-lss} (87)
@kindex byte-lss
Call @code{<} with two arguments, comparing the two values at the top of the stack with the numerical less-than relation.

@node byte-leq
@unnumberedsubsec @code{byte-leq} (88)
@kindex byte-leq
Call @code{<=} with two arguments, comparing the two values at the top of the stack with the numerical less-than-or-equals relation.

@node byte-geq
@unnumberedsubsec @code{byte-geq} (89)
@kindex byte-geq
Call @code{>=} with two arguments, comparing the two values at the top of the stack with the numerical less-than-or-equals relation.

@node byte-diff
@unnumberedsubsec @code{byte-diff} (90)
@kindex byte-diff
Call @code{-} with two arguments, subtracting the two values at the top of the stack.

@node byte-negate
@unnumberedsubsec @code{byte-negate} (91)
@kindex byte-negate
Call @code{-} with one argument, negating the top-of-stack value.

@node byte-plus
@unnumberedsubsec @code{byte-plus} (92)
@kindex byte-plus
Call @code{+} with two arguments, adding the two values at the top of the stack.

@node byte-mult
@unnumberedsubsec @code{byte-mult} (95)
@kindex byte-mult
Call @code{*} with two arguments, multiplying the two values at the top of the stack.

@node byte-max
@unnumberedsubsec @code{byte-max} (93)
@kindex byte-max
Call @code{max} with two arguments.

@node byte-min
@unnumberedsubsec @code{byte-min} (94)
@kindex byte-min
Call @code{min} with two arguments.

@node byte-point
@unnumberedsubsec @code{byte-point} (96)
@kindex byte-point
Call @code{point} with no arguments.

@node byte-goto-char
@unnumberedsubsec @code{byte-goto-char} (98)
@kindex byte-goto-char
Call @code{goto-char} with one argument.

@node byte-insert
@unnumberedsubsec @code{byte-insert} (99)
@kindex byte-insert
Call @code{insert} with one argument.

@node byte-point-min
@unnumberedsubsec @code{byte-point-min} (101)
@kindex byte-point-min
Call @code{point-min} with no arguments.

@node byte-point-max
@unnumberedsubsec @code{byte-point-max} (100)
@kindex byte-point-max
Call @code{point-max} with no arguments.

@node byte-char-after
@unnumberedsubsec @code{byte-char-after} (102)
@kindex byte-char-after
Call @code{char-after} with one argument.

@node byte-following-char
@unnumberedsubsec @code{byte-following-char} (103)
@kindex byte-following-char
Call @code{following-char} with no arguments.

@node byte-preceding-char
@unnumberedsubsec @code{byte-preceding-char} (104)
@kindex byte-preceding-char
Call @code{preceding-char} with no arguments.

@node byte-current-column
@unnumberedsubsec @code{byte-current-column} (105)
@kindex byte-current-column
Call @code{current-column} with no arguments.

@node byte-eolp
@unnumberedsubsec @code{byte-eolp} (108)
@kindex byte-eolp
Call @code{eolp} with no arguments.

@node byte-eobp
@unnumberedsubsec @code{byte-eobp} (109)
@kindex byte-eobp
Call @code{eobp} with no arguments.

@node byte-bolp
@unnumberedsubsec @code{byte-bolp} (110)
@kindex byte-bolp
Call @code{bolp} with no arguments.

@node byte-bobp
@unnumberedsubsec @code{byte-bobp} (111)
@kindex byte-bobp
Call @code{bobp} with no arguments.


@node byte-current-buffer
@unnumberedsubsec @code{byte-current-buffer} (112)
@kindex byte-current-buffer
Call @code{current-buffer} with no arguments.

@node byte-set-buffer
@unnumberedsubsec @code{byte-set-buffer} (113)
@kindex byte-set-buffer
Call @code{set-buffer} with one argument.

@node byte-forward-char
@unnumberedsubsec @code{byte-forward-char} (117)
@kindex byte-forward-char
Call @code{forward-char} with one argument.

@node byte-forward-word
@unnumberedsubsec @code{byte-forward-word} (118)
@kindex byte-forward-word
Call @code{forward-word} with one argument.

@node byte-skip-chars-forward
@unnumberedsubsec @code{byte-skip-chars-forward} (119)
@kindex byte-skip-chars-forward
Call @code{skip-chars-forward} with two arguments.

@node byte-skip-chars-backward
@unnumberedsubsec @code{byte-skip-chars-backward} (120)
@kindex byte-skip-chars-backward
Call @code{skip-chars-backward} with two arguments.

@node byte-forward-line
@unnumberedsubsec @code{byte-forward-line} (121)
@kindex byte-forward-line
Call @code{forward-line} with one argument.

@node byte-char-syntax
@unnumberedsubsec @code{byte-char-syntax} (122)
@kindex byte-char-syntax
Call @code{char-syntax} with one argument.

@node byte-buffer-substring
@unnumberedsubsec @code{byte-buffer-substring} (123)
@kindex byte-buffer-substring
Call @code{buffer-substring} with two arguments.

@node byte-delete-region
@unnumberedsubsec @code{byte-delete-region} (124)
@kindex byte-delete-region
Call @code{delete-region} with two arguments.

@node byte-narrow-to-region
@unnumberedsubsec @code{byte-narrow-to-region} (125)
@kindex byte-narrow-to-region
Call @code{narrow-to-region} with two arguments.

@node byte-widen
@unnumberedsubsec @code{byte-widen} (126)
@kindex byte-widen
Call @code{widen} with no arguments.

@node byte-end-of-line
@unnumberedsubsec @code{byte-end-of-line} (127)
@kindex byte-end-of-line
Call @code{end-of-line} with one argument.

@node byte-save-excursion
@unnumberedsubsec @code{byte-save-excursion} (138)
@kindex byte-save-excursion
Make a binding recording buffer, point, and mark.

@node byte-set-marker
@unnumberedsubsec @code{byte-set-marker} (147)
@kindex byte-set-marker
Call @code{set-marker} with three arguments.

@node byte-match-beginning
@unnumberedsubsec @code{byte-match-beginning} (148)
@kindex byte-match-beginning
Call @code{match-beginning} with one argument.

@node byte-match-end
@unnumberedsubsec @code{byte-match-end} (149)
@kindex byte-match-end
Call @code{match-end} with one argument.

@node byte-upcase
@unnumberedsubsec @code{byte-upcase} (150)
@kindex byte-upcase
Call @code{upcase} with one argument.

@node byte-downcase
@unnumberedsubsec @code{byte-downcase} (151)
@kindex byte-downcase
Call @code{downcase} with one argument.

@node byte-stringeqlsign
@unnumberedsubsec @code{byte-stringeqlsign} (152)
@kindex byte-stringeqlsign
Call @code{string=} with two arguments, comparing two strings for equality.

@node byte-stringlss
@unnumberedsubsec @code{byte-stringlss} (153)
@kindex byte-stringlss
Call @code{string<} with two arguments, comparing two strings.

@node byte-equal
@unnumberedsubsec @code{byte-equal} (154)
@kindex byte-equal
Call @code{equal} with two arguments.

@node byte-nthcdr
@unnumberedsubsec @code{byte-nthcdr} (155)
@kindex byte-nthcdr
Call @code{nthcdr} with two arguments.

@node byte-elt
@unnumberedsubsec @code{byte-elt} (156)
@kindex byte-elt
Call @code{elt} with two arguments.

@node byte-member
@unnumberedsubsec @code{byte-member} (157)
@kindex byte-member
Call @code{membec} with two arguments.

@node byte-assq
@unnumberedsubsec @code{byte-assq} (158)
@kindex byte-assq
Call @code{assq} with two arguments.

@node byte-nreverse
@unnumberedsubsec @code{byte-nreverse} (159)
@kindex byte-nreverse
Call @code{nreverse} with one argument.

@node byte-setcar
@unnumberedsubsec @code{byte-setcar} (160)
@kindex byte-setcar
Call @code{setcar} with two arguments.

@node byte-setcdr
@unnumberedsubsec @code{byte-setcdr} (161)
@kindex byte-setcdr
Call @code{setcdr} with two arguments.

@node byte-car-safe
@unnumberedsubsec @code{byte-car-safe} (162)
@kindex byte-car-safe
Call @code{car-safe} with one argument.

@node byte-cdr-safe
@unnumberedsubsec @code{byte-cdr-safe} (163)
@kindex byte-cdr-safe
Call @code{cdr-safe} with one argument.

@node byte-nconc
@unnumberedsubsec @code{byte-nconc} (164)
@kindex byte-nconc
Call @code{nconc} with two arguments.

@node byte-quo
@unnumberedsubsec @code{byte-quo} (165)
@kindex byte-quo
Call @code{/} with two arguments, dividing the two values at the top of the stack.

@node byte-rem
@unnumberedsubsec @code{byte-rem} (166)
@kindex byte-rem
Call @code{%} with two arguments, calculating the modulus of the two values at the top of the stack.

@node byte-numberp
@unnumberedsubsec @code{byte-numberp} (167)
@kindex byte-numberp
Call @code{numberp} with one argument.

@node byte-integerp
@unnumberedsubsec @code{byte-integerp} (168)
@kindex byte-integerp
Call @code{integerp} with one argument.

@node Stack Manipulation Instructions
@section Stack Manipulation Instructions

@menu
* byte-discard::
* byte-dup::
@end menu

@node byte-discard
@unnumberedsubsec @code{byte-discard} (136)
@kindex byte-discard
Discard one value.

@node byte-dup
@unnumberedsubsec @code{byte-dup} (137)
@kindex byte-dup
Make a copy of the top-of-stack value and push that onto the top of the evaluation stack.

@subsubsection Example
When lexical binding is in effect, @code{(defun en(n) n)} generates:
@verbatim
PC  Byte  Instruction
 0  137   (byte-dup . 0)  ;; duplicates top of stack: n
 1  135   (byte-return . 0)
@end verbatim

@node Binding Instructions
@section Binding Instructions

These instructions manipulate the special-bindings stack by creating a
new binding when executed.  They need to be balanced with
@code{byte-unbind} instructions.

@unnumberedsubsec @code{byte-save-excursion} (138)
@kindex byte-save-excursion
Make a binding recording buffer, point, and mark.

@node Opcode Table
@chapter Opcode Table

@multitable @columnfractions .06 .30 .55
@item Code @tab Instruction @tab Description
@item @verb{|  0|}
@tab Not used; see @code{dup}
@tab
@item @verb{|  1|}
@tab @code{byte-stack-ref1}
@tab stack reference 1
@item @verb{|  2|}
@tab @code{byte-stack-ref2}
@tab stack reference 2
@item @verb{|  3|}
@tab @code{byte-stack-ref3}
@tab stack reference 3
@item @verb{|  4|}
@tab @code{byte-stack-ref4}
@tab stack reference 4
@item @verb{|  5|}
@tab @code{byte-stack-ref5}
@tab stack reference 5
@item @verb{|  6|}
@tab @code{byte-stack-ref6}
@tab stack reference 0--255
@item @verb{|  7|}
@tab @code{byte-stack-ref7}
@tab stack reference 0--65535
@item @verb{|  8|}
@tab @code{byte-varref0}
@tab variable reference 0
@item @verb{|  9|}
@tab @code{byte-varref1}
@tab variable reference 1
@item @verb{| 10|}
@tab @code{byte-varref2}
@tab variable reference 2
@item @verb{| 11|}
@tab @code{byte-varref3}
@tab variable reference 3
@item @verb{| 12|}
@tab @code{byte-varref4}
@tab variable reference 4
@item @verb{| 13|}
@tab @code{byte-varref5}
@tab variable reference 5
@item @verb{| 14|}
@tab @code{byte-varref6}
@tab variable reference 0--255
@item @verb{| 15|}
@tab @code{byte-varref7}
@tab variable reference 0--65535
@item @verb{| 16|}
@tab @code{byte-varset0}
@tab Sets variable 0
@item @verb{| 17|}
@tab @code{byte-varset1}
@tab Sets variable 1
@item @verb{| 18|}
@tab @code{byte-varset2}
@tab Sets variable 2
@item @verb{| 19|}
@tab @code{byte-varset3}
@tab Sets variable 3
@item @verb{| 20|}
@tab @code{byte-varset4}
@tab Sets variable 4
@item @verb{| 21|}
@tab @code{byte-varset5}
@tab Sets variable 5
@item @verb{| 22|}
@tab @code{byte-varset6}
@tab Sets variable 6
@item @verb{| 23|}
@tab @code{byte-varset7}
@tab Sets variable 7
@item @verb{| 24|}
@tab @code{byte-varbind}
@tab Binds a variable
@item @verb{| 32|}
@tab @code{byte-call}
@tab Calls a function
@item @verb{| 40|}
@tab @code{byte-unbind}
@tab Unbinds special bindings
@item @verb{| 51|}
@tab @tab Unused
@item @verb{| 52|}
@tab @tab Unused
@item @verb{| 53|}
@tab @tab Unused
@item @verb{| 54|}
@tab @tab Unused
@item @verb{| 55|}
@tab @tab Unused
@item @verb{| 56|}
@tab @code{byte-nth}
@tab Call @code{nth} with two arguments.
@item @verb{| 57|}
@tab @code{byte-symbolp}
@tab Call @code{symbolp} with one argument.
@item @verb{| 58|}
@tab @code{byte-consp}
@tab Call @code{consp} with one argument.
@item @verb{| 59|}
@tab @code{byte-stringp}
@tab Call @code{stringp} with one argument.
@item @verb{| 60|}
@tab @code{byte-listp}
@tab Call @code{listp} with one argument.
@item @verb{| 61|}
@tab @code{byte-eq}
@tab Call @code{eq} with two arguments.
@item @verb{| 62|}
@tab @code{byte-memq}
@tab Call @code{memq} with two arguments.
@item @verb{| 63|}
@tab @code{byte-not}
@tab Call @code{not} with one argument.
@item @verb{| 64|}
@tab @code{byte-car}
@tab Call @code{car} with one argument.
@item @verb{| 65|}
@tab @code{byte-cdr}
@tab Call @code{cdr} with one argument.
@item @verb{| 66|}
@tab @code{byte-cons}
@tab Call @code{cons} with two arguments.
@item @verb{| 67|}
@tab @code{byte-list1}
@tab Call @code{list} with one argument.
@item @verb{| 68|}
@tab @code{byte-list2}
@tab Call @code{list} with two arguments.
@item @verb{| 69|}
@tab @code{byte-list3}
@tab Call @code{list} with three arguments.
@item @verb{| 70|}
@tab @code{byte-list4}
@tab Call @code{list} with four arguments.
@item @verb{| 71|}
@tab @code{byte-length}
@tab Call @code{length} with one argument.
@item @verb{| 72|}
@tab @code{byte-aref}
@tab Call @code{aref} with two arguments.
@item @verb{| 73|}
@tab @code{byte-aset}
@tab Call @code{aset} with three arguments.
@item @verb{| 74|}
@tab @code{byte-symbol-value}
@tab Call @code{symbol-value} with one argument.
@item @verb{| 75|}
@tab @code{byte-symbol-function}
@tab Call @code{symbol-function} with one argument.
@item @verb{| 76|}
@tab @code{byte-set}
@tab Call @code{set} with two arguments.
@item @verb{| 77|}
@tab @code{byte-fset}
@tab Call @code{fset} with two arguments.
@item @verb{| 78|}
@tab @code{byte-get}
@tab Call @code{get} with two arguments.
@item @verb{| 79|}
@tab @code{byte-substring}
@tab Call @code{substring} with three arguments.
@item @verb{| 80|}
@tab @code{byte-concat2}
@tab Call @code{concat} with two arguments.
@item @verb{| 81|}
@tab @code{byte-concat3}
@tab Call @code{concat} with three arguments.
@item @verb{| 82|}
@tab @code{byte-concat4}
@tab Call @code{concat} with four arguments.
@item @verb{| 83|}
@tab @code{byte-sub1}
@tab Call @code{1-} with one argument, subtracting one from the top-of-stack value.
@item @verb{| 84|}
@tab @code{byte-add1}
@tab Call @code{1+} with one argument, adding one to the top-of-stack value.
@item @verb{| 85|}
@tab @code{byte-eqlsign}
@tab Call @code{=} with two arguments, comparing the two values at the top of the stack for numerical or strict equality.
@item @verb{| 86|}
@tab @code{byte-gtr}
@tab Call @code{>} with two arguments, comparing the two values at the top of the stack with the numerical greater-than relation.
@item @verb{| 87|}
@tab @code{byte-lss}
@tab Call @code{<} with two arguments, comparing the two values at the top of the stack with the numerical less-than relation.
@item @verb{| 88|}
@tab @code{byte-leq}
@tab Call @code{<=} with two arguments, comparing the two values at the top of the stack with the numerical less-than-or-equals relation.
@item @verb{| 89|}
@tab @code{byte-geq}
@tab Call @code{>=} with two arguments, comparing the two values at the top of the stack with the numerical less-than-or-equals relation.
@item @verb{| 90|}
@tab @code{byte-diff}
@tab Call @code{-} with two arguments, subtracting the two values at the top of the stack.
@item @verb{| 91|}
@tab @code{byte-negate}
@tab Call @code{-} with one argument, negating the top-of-stack value.
@item @verb{| 92|}
@tab @code{byte-plus}
@tab Call @code{+} with two arguments, adding the two values at the top of the stack.
@item @verb{| 95|}
@tab @code{byte-mult}
@tab Call @code{*} with two arguments, multiplying the two values at the top of the stack.
@item @verb{| 93|}
@tab @code{byte-max}
@tab Call @code{max} with two arguments.
@item @verb{| 94|}
@tab @code{byte-min}
@tab Call @code{min} with two arguments.
@item @verb{| 96|}
@tab @code{byte-point}
@tab Call @code{point} with no arguments.
@item @verb{| 98|}
@tab @code{byte-goto-char}
@tab Call @code{goto-char} with one argument.
@item @verb{| 99|}
@tab @code{byte-insert}
@tab Call @code{insert} with one argument.
@item @verb{|101|}
@tab @code{byte-point-min}
@tab Call @code{point-min} with no arguments.
@item @verb{|100|}
@tab @code{byte-point-max}
@tab Call @code{point-max} with no arguments.
@item @verb{|102|}
@tab @code{byte-char-after}
@tab Call @code{char-after} with one argument.
@item @verb{|103|}
@tab @code{byte-following-char}
@tab Call @code{following-char} with no arguments.
@item @verb{|104|}
@tab @code{byte-preceding-char}
@tab Call @code{preceding-char} with no arguments.
@item @verb{|105|}
@tab @code{byte-current-column}
@tab Call @code{current-column} with no arguments.
@item @verb{|108|}
@tab @code{byte-eolp}
@tab Call @code{eolp} with no arguments.
@item @verb{|109|}
@tab @code{byte-eobp}
@tab Call @code{eobp} with no arguments.
@item @verb{|110|}
@tab @code{byte-bolp}
@tab Call @code{bolp} with no arguments.
@item @verb{|111|}
@tab @code{byte-bobp}
@tab Call @code{bobp} with no arguments.
@item @verb{|112|}
@tab @code{byte-current-buffer}
@tab Call @code{current-buffer} with no arguments.
@item @verb{|113|}
@tab @code{byte-set-buffer}
@tab Call @code{set-buffer} with one argument.
@item @verb{|117|}
@tab @code{byte-forward-char}
@tab Call @code{forward-char} with one argument.
@item @verb{|118|}
@tab @code{byte-forward-word}
@tab Call @code{forward-word} with one argument.
@item @verb{|119|}
@tab @code{byte-skip-chars-forward}
@tab Call @code{skip-chars-forward} with two arguments.
@item @verb{|120|}
@tab @code{byte-skip-chars-backward}
@tab Call @code{skip-chars-backward} with two arguments.
@item @verb{|121|}
@tab @code{byte-forward-line}
@tab Call @code{forward-line} with one argument.
@item @verb{|122|}
@tab @code{byte-char-syntax}
@tab Call @code{char-syntax} with one argument.
@item @verb{|123|}
@tab @code{byte-buffer-substring}
@tab Call @code{buffer-substring} with two arguments.
@item @verb{|124|}
@tab @code{byte-delete-region}
@tab Call @code{delete-region} with two arguments.
@item @verb{|125|}
@tab @code{byte-narrow-to-region}
@tab Call @code{narrow-to-region} with two arguments.
@item @verb{|126|}
@tab @code{byte-widen}
@tab Call @code{widen} with no arguments.
@item @verb{|127|}
@tab @code{byte-end-of-line}
@tab Call @code{end-of-line} with one argument.
@item @verb{|129|}
@tab @code{byte-constant2}
@tab Load a constant 0--65535 (but generally greater than 63)
@item @verb{|136|}
@tab @code{byte-discard}
@tab Discard top stack value
@item @verb{|137|}
@tab @code{byte-dup}
@tab Duplicate top stack value
@item @verb{|138|}
@tab @code{byte-save-excursion}
@tab Make a binding recording buffer, point, and mark.
@item @verb{|147|}
@tab @code{byte-set-marker}
@tab Call @code{set-marker} with three arguments.
@item @verb{|148|}
@tab @code{byte-match-beginning}
@tab Call @code{match-beginning} with one argument.
@item @verb{|149|}
@tab @code{byte-match-end}
@tab Call @code{match-end} with one argument.
@item @verb{|150|}
@tab @code{byte-upcase}
@tab Call @code{upcase} with one argument.
@item @verb{|151|}
@tab @code{byte-downcase}
@tab Call @code{downcase} with one argument.
@item @verb{|152|}
@tab @code{byte-stringeqlsign}
@tab Call @code{string=} with two arguments, comparing two strings for equality.
@item @verb{|153|}
@tab @code{byte-stringlss}
@tab Call @code{string<} with two arguments, comparing two strings.
@item @verb{|154|}
@tab @code{byte-equal}
@tab Call @code{equal} with two arguments.
@item @verb{|155|}
@tab @code{byte-nthcdr}
@tab Call @code{nthcdr} with two arguments.
@item @verb{|156|}
@tab @code{byte-elt}
@tab Call @code{elt} with two arguments.
@item @verb{|157|}
@tab @code{byte-member}
@tab Call @code{membec} with two arguments.
@item @verb{|158|}
@tab @code{byte-assq}
@tab Call @code{assq} with two arguments.
@item @verb{|159|}
@tab @code{byte-nreverse}
@tab Call @code{nreverse} with one argument.
@item @verb{|160|}
@tab @code{byte-setcar}
@tab Call @code{setcar} with two arguments.
@item @verb{|161|}
@tab @code{byte-setcdr}
@tab Call @code{setcdr} with two arguments.
@item @verb{|162|}
@tab @code{byte-car-safe}
@tab Call @code{car-safe} with one argument.
@item @verb{|163|}
@tab @code{byte-cdr-safe}
@tab Call @code{cdr-safe} with one argument.
@item @verb{|164|}
@tab @code{byte-nconc}
@tab Call @code{nconc} with two arguments.
@item @verb{|165|}
@tab @code{byte-quo}
@tab Call @code{/} with two arguments, dividing the two values at the top of the stack.
@item @verb{|166|}
@tab @code{byte-rem}
@tab Call @code{%} with two arguments, calculating the modulus of the two values at the top of the stack.
@item @verb{|167|}
@tab @code{byte-numberp}
@tab Call @code{numberp} with one argument.
@item @verb{|168|}
@tab @code{byte-integerp}
@tab Call @code{integerp} with one argument.

@item @verb{|169|}
@tab
@tab Unused
@item @verb{|170|}
@tab
@tab Unused
@item @verb{|171|}
@tab
@tab Unused
@item @verb{|172|}
@tab
@tab Unused
@item @verb{|173|}
@tab
@tab Unused
@item @verb{|174|}
@tab
@tab Unused
@item @verb{|175|}
@tab @code{byte-listN}
@tab
@item @verb{|176|}
@tab @code{byte-concatN}
@item @verb{|177|}
@tab @code{byte-insertN}
@item @verb{|178|}
@tab @code{byte-stack-set}
@item @verb{|179|}
@tab @code{byte-stack-set2}
@item @verb{|192|}
@tab @code{byte-constant-i0}
@item @verb{|193|}
@tab @code{byte-constant-i1}
@item @verb{|194|}
@tab @code{byte-constant-i2}
@item @verb{|195|}
@tab @code{byte-constant-i3}
@item @verb{|196|}
@tab @code{byte-constant-i4}
@item @verb{|197|}
@tab @code{byte-constant-i5}
@item @verb{|198|}
@tab @code{byte-constant-i6}
@item @verb{|199|}
@tab @code{byte-constant-i7}
@item @verb{|200|}
@tab @code{byte-constant-i8}
@item @verb{|201|}
@tab @code{byte-constant-i9}
@item @verb{|202|}
@tab @code{byte-constant-i10}
@item @verb{|203|}
@tab @code{byte-constant-i11}
@item @verb{|204|}
@tab @code{byte-constant-i12}
@item @verb{|205|}
@tab @code{byte-constant-i13}
@item @verb{|206|}
@tab @code{byte-constant-i14}
@item @verb{|207|}
@tab @code{byte-constant-i15}
@item @verb{|208|}
@tab @code{byte-constant-i16}
@item @verb{|209|}
@tab @code{byte-constant-i17}
@item @verb{|210|}
@tab @code{byte-constant-i18}
@item @verb{|211|}
@tab @code{byte-constant-i19}
@item @verb{|212|}
@tab @code{byte-constant-i20}
@item @verb{|213|}
@tab @code{byte-constant-i21}
@item @verb{|214|}
@tab @code{byte-constant-i22}
@item @verb{|215|}
@tab @code{byte-constant-i23}
@item @verb{|216|}
@tab @code{byte-constant-i24}
@item @verb{|217|}
@tab @code{byte-constant-i25}
@item @verb{|218|}
@tab @code{byte-constant-i26}
@item @verb{|219|}
@tab @code{byte-constant-i27}
@item @verb{|220|}
@tab @code{byte-constant-i28}
@item @verb{|221|}
@tab @code{byte-constant-i29}
@item @verb{|222|}
@tab @code{byte-constant-i30}
@item @verb{|223|}
@tab @code{byte-constant-i31}
@item @verb{|224|}
@tab @code{byte-constant-i32}
@item @verb{|225|}
@tab @code{byte-constant-i33}
@item @verb{|226|}
@tab @code{byte-constant-i34}
@item @verb{|227|}
@tab @code{byte-constant-i35}
@item @verb{|228|}
@tab @code{byte-constant-i36}
@item @verb{|229|}
@tab @code{byte-constant-i37}
@item @verb{|230|}
@tab @code{byte-constant-i38}
@item @verb{|231|}
@tab @code{byte-constant-i39}
@item @verb{|232|}
@tab @code{byte-constant-i40}
@item @verb{|233|}
@tab @code{byte-constant-i41}
@item @verb{|234|}
@tab @code{byte-constant-i42}
@item @verb{|235|}
@tab @code{byte-constant-i43}
@item @verb{|236|}
@tab @code{byte-constant-i44}
@item @verb{|237|}
@tab @code{byte-constant-i45}
@item @verb{|238|}
@tab @code{byte-constant-i46}
@item @verb{|239|}
@tab @code{byte-constant-i47}
@item @verb{|240|}
@tab @code{byte-constant-i48}
@item @verb{|241|}
@tab @code{byte-constant-i49}
@item @verb{|242|}
@tab @code{byte-constant-i50}
@item @verb{|243|}
@tab @code{byte-constant-i51}
@item @verb{|244|}
@tab @code{byte-constant-i52}
@item @verb{|245|}
@tab @code{byte-constant-i53}
@item @verb{|246|}
@tab @code{byte-constant-i54}
@item @verb{|247|}
@tab @code{byte-constant-i55}
@item @verb{|248|}
@tab @code{byte-constant-i56}
@item @verb{|249|}
@tab @code{byte-constant-i57}
@item @verb{|250|}
@tab @code{byte-constant-i58}
@item @verb{|251|}
@tab @code{byte-constant-i59}
@item @verb{|252|}
@tab @code{byte-constant-i60}
@item @verb{|253|}
@tab @code{byte-constant-i61}
@item @verb{|254|}
@tab @code{byte-constant-i62}
@item @verb{|255|}
@tab @code{byte-constant-i63}
@end multitable


@node References
@chapter References

@itemize
@item @uref{http://git.savannah.gnu.org/cgit/emacs.git/tree/src/bytecode.c, Execution of byte code produced by bytecomp.el}
@item @uref{http://git.savannah.gnu.org/cgit/emacs.git/tree/lisp/emacs-lisp/bytecomp.el, bytecomp.el --- compilation of Lisp code into byte code}
@item @uref{http://git.savannah.gnu.org/cgit/emacs.git/tree/src/data.c, data.c --- Primitive operations on Lisp data types}
@item @uref{http://nullprogram.com/blog/2014/01/04/, Emacs Byte-code Internals}
@item @uref{https://www.emacswiki.org/emacs/ByteCodeEngineering, Emacs Wiki ByteCodeEngineering}
@item @uref{https://groups.google.com/forum/#!topic/gnu.emacs.sources/oMfZT_4Oxrc easm.el, Assembler for Emacs' bytecode interpreter}o
@item @uref{https://github.com/rocky/elisp-decompile, Emacs Lisp Decompiler}
@end itemize

@node Instruction Index
@unnumbered Instruction Index
@printindex ky

@bye
