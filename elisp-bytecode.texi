\input texinfo  @c -*-texinfo-*-
@c %**start of header

@c @include docstyle.texi

@setfilename elisp-bytecode

@dircategory Emacs lisp
@direntry
* Bytecode Bytecode Instructions::  The Emacs Lisp Bytecode Manual.
@end direntry

@node Top
@top Emacs Lisp Bytecode Manual

@menu
* Lisp Bytecode Instructions::  Description of all Emacs Lisp Bytecode Instructions
* Opcode Table::                Table of Bytecode Instruction ordered by Opcode Number
* References::
* Instruction Index::
@end menu

@node Lisp Bytecode Instructions
@chapter Lisp Bytecode Instructions

@menu
* Argument-Packing Instructions::
* Constant Instructions::
* Return Instruction::
* Simple Instructions::
* Stack Manipulation Instructions::
* Binding Instructions::
@end menu

@node Argument-Packing Instructions
@section Argument-Packing Instructions

These instructions from opcode 1 to 47 encode an operand value from 0
to 7 as part of the opcode.  If the encoded value is 6, the actual
operand value is the byte following the opcode.  If the encoded value
is 7, the actual operand value is the two-byte number following the
opcode, in little-endian byte order.

@menu
* byte-stack-ref::
* byte-varref::
* byte-varset::
* byte-varbind::
* byte-call::
* byte-unbind::
@end menu

@node byte-stack-ref
@unnumberedsubsec @code{byte-stack-ref} (1--7)
@kindex byte-stack-ref

A stack reference

@node byte-varref
@unnumberedsubsec @code{byte-varref} (8--15)
@kindex byte-varref
Loads the value of a variable reference on the evaluation stack.

@subsubsection Example

When dynamic binding is in effect, @code{(defun en(n) n)} generates:
@verbatim
PC  Byte  Instruction
 0    8   (byte-varref n)  ;; loads variable n onto the stack
 1  135   (byte-return . 0)
@end verbatim

@node byte-varset
@unnumberedsubsec @code{byte-varset} (16--23)
@kindex byte-varset

Sets a variable given in the operand to the value that is on the top
of the stack.

@subsubsection Example

When dynamic binding is in effect, @code{(defun n5(n) (setq n 5))} generates:
@verbatim
PC  Byte  Instruction
 0  193   (byte-constant 5)
 1  137   (byte-dup . 0)
 2   16   (byte-varset n) ;; sets variable n
 3  135   (byte-return . 0)
@end verbatim

@node byte-varbind
@unnumberedsubsec @code{byte-varbind} (24--31)
@kindex byte-varbind

Binds a variable

@node byte-call
@unnumberedsubsec @code{byte-call} (32--39)
@kindex byte-call

Calls a function.  The opcode argument specifies the number of
arguments to pass to the function from the stack, excluding the
function itself.

@subsubsection Example

@code{(exchange-point-and-mark)} generates:
@verbatim
PC  Byte  Instruction
 0  192   (byte-constant exchange-point-and-mark)
 1   32   (byte-call . 0)
 2  135   (byte-return . 0)
@end verbatim

@node byte-unbind
@unnumberedsubsec @code{byte-unbind} (40--47)
@kindex byte-unbind

Unbinds special bindings

@node Constant Instructions
@section Constant Instructions

The instructions from opcode 192 to 255 encode a constant index from 0
to 63 as part of the opcode.  For constants outside of that range, see
instruction 129.

@unnumberedsubsec @code{byte-constant} (192--255)
@kindex byte-constant
Pushes a constant reference on the stack.
Note that there are special instructions to push constants from 0 to 63.

@node Return Instruction
@section Return Instruction

@unnumberedsubsec @code{byte-return} (135)
@kindex byte-return
Return from function.  This is the last instruction in a function's
bytecode sequence. The top value on the evaluation stack is the return value.

@subsubsection Example
@code{(defun one(n) 1)} generates:
@verbatim
PC  Byte  Instruction
 0  192   (byte-constant 1)
 1  135   (byte-return . 0)
@end verbatim

@node Simple Instructions
@section Simple Instructions

These instructions use up one byte, and are followed by the next
instruction directly.  They are equivalent to calling an Emacs Lisp
function with a fixed number of arguments: the arguments are popped
from the stack, and a single return value is pushed back onto the
stack.

@menu
* byte-nth::
* byte-symbolp::
* byte-consp::
* byte-stringp::
* byte-listp::
* byte-eq::
* byte-memq::
* byte-not::
* byte-car::
* byte-cdr::
* byte-cons::
* byte-list1::
* byte-list2::
* byte-list3::
* byte-list4::
* byte-length::
* byte-aref::
* byte-aset::
* byte-symbol-value::
* byte-symbol-function::
* byte-set::
* byte-fset::
* byte-get::
* byte-substring::
* byte-concat2::
* byte-concat3::
* byte-concat4::
@end menu

@node byte-nth
@unnumberedsubsec @code{byte-nth} (56)
@kindex byte-nth
Call @code{nth} with two arguments.

@node byte-symbolp
@unnumberedsubsec @code{byte-symbolp} (57)

@node byte-consp
@unnumberedsubsec @code{byte-consp} (58)
@kindex byte-consp
Call @code{consp} with one argument.

@node byte-stringp
@unnumberedsubsec @code{byte-stringp} (59)
@kindex byte-stringp
Call @code{stringp} with one argument.

@node byte-listp
@unnumberedsubsec @code{byte-listp} (60)
@kindex byte-listp
Call @code{listp} with one argument.

@node byte-eq
@unnumberedsubsec @code{byte-eq} (61)
@kindex byte-eq
Call @code{eq} with two arguments.

@node byte-memq
@unnumberedsubsec @code{byte-memq} (62)
@kindex byte-memq
Call @code{memq} with two arguments.

@node byte-not
@unnumberedsubsec @code{byte-not} (63)
@kindex byte-not
Call @code{not} with one argument.

@node byte-car
@unnumberedsubsec @code{byte-car} (64)
@kindex byte-car
Call @code{car} with one argument.

@node byte-cdr
@unnumberedsubsec @code{byte-cdr} (65)
@kindex byte-cdr
Call @code{cdr} with one argument.

@node byte-cons
@unnumberedsubsec @code{byte-cons} (66)
@kindex byte-cons
Call @code{cons} with two arguments.

@node byte-list1
@unnumberedsubsec @code{byte-list1} (67)
@kindex byte-list1
Call @code{list} with one argument.

@node byte-list2
@unnumberedsubsec @code{byte-list2} (68)
@kindex byte-list2
Call @code{list} with two arguments.

@node byte-list3
@unnumberedsubsec @code{byte-list3} (69)
@kindex byte-list3
Call @code{list} with three arguments.

@node byte-list4
@unnumberedsubsec @code{byte-list4} (70)
@kindex byte-list4
Call @code{list} with four arguments.

@node byte-length
@unnumberedsubsec @code{byte-length} (71)
@kindex byte-length
Call @code{length} with one argument.

@node byte-aref
@unnumberedsubsec @code{byte-aref} (72)
@kindex byte-aref
Call @code{aref} with two arguments.

@node byte-aset
@unnumberedsubsec @code{byte-aset} (73)
@kindex byte-aset
Call @code{aset} with three arguments.

@node byte-symbol-value
@unnumberedsubsec @code{byte-symbol-value} (74)
@kindex byte-symbol-value
Call @code{symbol-value} with one argument.

@node byte-symbol-function
@unnumberedsubsec @code{byte-symbol-function} (75)
@kindex byte-symbol-function
Call @code{symbol-function} with one argument.

@node byte-set
@unnumberedsubsec @code{byte-set} (76)
@kindex byte-set
Call @code{set} with two arguments.

@node byte-fset
@unnumberedsubsec @code{byte-fset} (77)
@kindex byte-fset
Call @code{fset} with two arguments.

@node byte-get
@unnumberedsubsec @code{byte-get} (78)
@kindex byte-get
Call @code{get} with two arguments.

@node byte-substring
@unnumberedsubsec @code{byte-substring} (79)
@kindex byte-substring
Call @code{substring} with three arguments.

@node byte-concat2
@unnumberedsubsec @code{byte-concat2} (80)
@kindex byte-concat2
Call @code{concat} with two arguments.

@node byte-concat3
@unnumberedsubsec @code{byte-concat3} (81)
@kindex byte-concat3
Call @code{concat} with three arguments.

@node byte-concat4
@unnumberedsubsec @code{byte-concat4} (82)
@kindex byte-concat4
Call @code{concat} with four arguments.

@node Stack Manipulation Instructions
@section Stack Manipulation Instructions

@menu
* byte-discard::
* byte-dup::
@end menu

@node byte-discard
@unnumberedsubsec @code{byte-discard} (136)
@kindex byte-discard
Discard one value.

@node byte-dup
@unnumberedsubsec @code{byte-dup} (137)
@kindex byte-dup
Duplicate one value.

@node Binding Instructions
@section Binding Instructions

These instructions manipulate the special-bindings stack by creating a
new binding when executed.  They need to be balanced with
@code{byte-unbind} instructions.

@unnumberedsubsec @code{byte-save-excursion} (138)
@kindex byte-save-excursion
Make a binding recording buffer, point, and mark.

@node Opcode Table
@chapter Opcode Table

@multitable @columnfractions .06 .30 .55
@item Code @tab Instruction @tab Description
@item @verb{|  0|}
@tab Not used; see @code{dup}
@tab
@item @verb{|  1|}
@tab @code{byte-stack-ref 1}
@tab stack reference 1
@item @verb{|  2|}
@tab @code{byte-stack-ref 2}
@tab stack reference 2
@item @verb{|  3|}
@tab @code{byte-stack-ref 3}
@tab stack reference 3
@item @verb{|  4|}
@tab @code{byte-stack-ref 4}
@tab stack reference 4
@item @verb{|  5|}
@tab @code{byte-stack-ref 5}
@tab stack reference 5
@item @verb{|  6|}
@tab @code{byte-stack-ref 6}
@tab stack reference 0--255
@item @verb{|  7|}
@tab @code{byte-stack-ref 7}
@tab stack reference 0--65535
@item @verb{|  8|}
@tab @code{byte-varref 0}
@tab variable reference 0
@item @verb{|  9|}
@tab @code{byte-varref 1}
@tab variable reference 1
@item @verb{| 10|}
@tab @code{byte-varref 2}
@tab variable reference 2
@item @verb{| 11|}
@tab @code{byte-varref 3}
@tab variable reference 3
@item @verb{| 12|}
@tab @code{byte-varref 4}
@tab variable reference 4
@item @verb{| 13|}
@tab @code{byte-varref 5}
@tab variable reference 5
@item @verb{| 14|}
@tab @code{byte-varref 6}
@tab variable reference 0--255
@item @verb{| 15|}
@tab @code{byte-varref 7}
@tab variable reference 0--65535
@item @verb{| 16|}
@tab @code{byte-varset 0}
@tab Sets variable 0
@item @verb{| 17|}
@tab @code{byte-varset 1}
@tab Sets variable 1
@item @verb{| 18|}
@tab @code{byte-varset 2}
@tab Sets variable 2
@item @verb{| 19|}
@tab @code{byte-varset 3}
@tab Sets variable 3
@item @verb{| 20|}
@tab @code{byte-varset 4}
@tab Sets variable 4
@item @verb{| 21|}
@tab @code{byte-varset 5}
@tab Sets variable 5
@item @verb{| 22|}
@tab @code{byte-varset 6}
@tab Sets variable 6
@item @verb{| 23|}
@tab @code{byte-varset 7}
@tab Sets variable 7
@item @verb{| 24|}
@tab @code{byte-varbind}
@tab Binds a variable
@item @verb{| 32|}
@tab @code{byte-call}
@tab Calls a function
@item @verb{| 40|}
@tab @code{byte-unbind}
@tab Unbinds special bindings
@item @verb{| 51|}
@tab @tab Unused
@item @verb{| 52|}
@tab @tab Unused
@item @verb{| 53|}
@tab @tab Unused
@item @verb{| 54|}
@tab @tab Unused
@item @verb{| 55|}
@tab @tab Unused
@item @verb{| 56|}
@tab @code{byte-nth}
@tab Call @code{nth} with two arguments.
@item @verb{| 57|}
@tab @code{byte-symbolp}
@tab Call @code{symbolp} with one argument.
@item @verb{| 58|}
@tab @code{byte-consp}
@tab Call @code{consp} with one argument.
@item @verb{| 59|}
@tab @code{byte-stringp}
@tab Call @code{stringp} with one argument.
@item @verb{| 60|}
@tab @code{byte-listp}
@tab Call @code{listp} with one argument.
@item @verb{| 61|}
@tab @code{byte-eq}
@tab Call @code{eq} with two arguments.
@item @verb{| 62|}
@tab @code{byte-memq}
@tab Call @code{memq} with two arguments.
@item @verb{| 63|}
@tab @code{byte-not}
@tab Call @code{not} with one argument.
@item @verb{| 64|}
@tab @code{byte-car}
@tab Call @code{car} with one argument.
@item @verb{| 65|}
@tab @code{byte-cdr}
@tab Call @code{cdr} with one argument.
@item @verb{| 66|}
@tab @code{byte-cons}
@tab Call @code{cons} with two arguments.
@item @verb{| 67|}
@tab @code{byte-list1}
@tab Call @code{list} with one argument.
@item @verb{| 68|}
@tab @code{byte-list2}
@tab Call @code{list} with two arguments.
@item @verb{| 69|}
@tab @code{byte-list3}
@tab Call @code{list} with three arguments.
@item @verb{| 70|}
@tab @code{byte-list4}
@tab Call @code{list} with four arguments.
@item @verb{| 71|}
@tab @code{byte-length}
@tab Call @code{length} with one argument.
@item @verb{| 72|}
@tab @code{byte-aref}
@tab Call @code{aref} with two arguments.
@item @verb{| 73|}
@tab @code{byte-aset}
@tab Call @code{aset} with three arguments.
@item @verb{| 74|}
@tab @code{byte-symbol-value}
@tab Call @code{symbol-value} with one argument.
@item @verb{| 75|}
@tab @code{byte-symbol-function}
@tab Call @code{symbol-function} with one argument.
@item @verb{| 76|}
@tab @code{byte-set}
@tab Call @code{set} with two arguments.
@item @verb{| 77|}
@tab @code{byte-fset}
@tab Call @code{fset} with two arguments.
@item @verb{| 78|}
@tab @code{byte-get}
@tab Call @code{get} with two argumments.
@item @verb{| 79|}
@tab @code{byte-substring}
@tab Call @code{substring} with three arguments.
@item @verb{| 80|}
@tab @code{byte-concat2}
@tab Call @code{concat} with two arguments.
@item @verb{| 81|}
@tab @code{byte-concat3}
@tab Call @code{concat} with three arguments.
@item @verb{| 82|}
@tab @code{byte-concat4}
@tab Call @code{concat} with four arguments.
@item @verb{|129|}
@tab @code{byte-constant}
@tab Load a constant 0--65535 (but generally greater than 63)
@item @verb{|136|}
@tab @code{byte-discard}
@tab Discard top stack value
@item @verb{|137|}
@tab @code{byte-discard}
@tab Duplicate top stack value
@item @verb{|138|}
@tab @code{byte-save-excursion}
@tab Make a binding recording buffer, point, and mark.
@item @verb{|192|}
@tab @code{byte-constant 0}
@item @verb{|193|}
@tab @code{byte-constant 1}
@item @verb{|194|}
@tab @code{byte-constant 2}
@item @verb{|195|}
@tab @code{byte-constant 3}
@item @verb{|196|}
@tab @code{byte-constant 4}
@item @verb{|197|}
@tab @code{byte-constant 5}
@item @verb{|198|}
@tab @code{byte-constant 6}
@item @verb{|199|}
@tab @code{byte-constant 7}
@item @verb{|200|}
@tab @code{byte-constant 8}
@item @verb{|201|}
@tab @code{byte-constant 9}
@item @verb{|202|}
@tab @code{byte-constant 10}
@item @verb{|203|}
@tab @code{byte-constant 11}
@item @verb{|204|}
@tab @code{byte-constant 12}
@item @verb{|205|}
@tab @code{byte-constant 13}
@item @verb{|206|}
@tab @code{byte-constant 14}
@item @verb{|207|}
@tab @code{byte-constant 15}
@item @verb{|208|}
@tab @code{byte-constant 16}
@item @verb{|209|}
@tab @code{byte-constant 17}
@item @verb{|210|}
@tab @code{byte-constant 18}
@item @verb{|211|}
@tab @code{byte-constant 19}
@item @verb{|212|}
@tab @code{byte-constant 20}
@item @verb{|213|}
@tab @code{byte-constant 21}
@item @verb{|214|}
@tab @code{byte-constant 22}
@item @verb{|215|}
@tab @code{byte-constant 23}
@item @verb{|216|}
@tab @code{byte-constant 24}
@item @verb{|217|}
@tab @code{byte-constant 25}
@item @verb{|218|}
@tab @code{byte-constant 26}
@item @verb{|219|}
@tab @code{byte-constant 27}
@item @verb{|220|}
@tab @code{byte-constant 28}
@item @verb{|221|}
@tab @code{byte-constant 29}
@item @verb{|222|}
@tab @code{byte-constant 30}
@item @verb{|223|}
@tab @code{byte-constant 31}
@item @verb{|224|}
@tab @code{byte-constant 32}
@item @verb{|225|}
@tab @code{byte-constant 33}
@item @verb{|226|}
@tab @code{byte-constant 34}
@item @verb{|227|}
@tab @code{byte-constant 35}
@item @verb{|228|}
@tab @code{byte-constant 36}
@item @verb{|229|}
@tab @code{byte-constant 37}
@item @verb{|230|}
@tab @code{byte-constant 38}
@item @verb{|231|}
@tab @code{byte-constant 39}
@item @verb{|232|}
@tab @code{byte-constant 40}
@item @verb{|233|}
@tab @code{byte-constant 41}
@item @verb{|234|}
@tab @code{byte-constant 42}
@item @verb{|235|}
@tab @code{byte-constant 43}
@item @verb{|236|}
@tab @code{byte-constant 44}
@item @verb{|237|}
@tab @code{byte-constant 45}
@item @verb{|238|}
@tab @code{byte-constant 46}
@item @verb{|239|}
@tab @code{byte-constant 47}
@item @verb{|240|}
@tab @code{byte-constant 48}
@item @verb{|241|}
@tab @code{byte-constant 49}
@item @verb{|242|}
@tab @code{byte-constant 50}
@item @verb{|243|}
@tab @code{byte-constant 51}
@item @verb{|244|}
@tab @code{byte-constant 52}
@item @verb{|245|}
@tab @code{byte-constant 53}
@item @verb{|246|}
@tab @code{byte-constant 54}
@item @verb{|247|}
@tab @code{byte-constant 55}
@item @verb{|248|}
@tab @code{byte-constant 56}
@item @verb{|249|}
@tab @code{byte-constant 57}
@item @verb{|250|}
@tab @code{byte-constant 58}
@item @verb{|251|}
@tab @code{byte-constant 59}
@item @verb{|252|}
@tab @code{byte-constant 60}
@item @verb{|253|}
@tab @code{byte-constant 61}
@item @verb{|254|}
@tab @code{byte-constant 62}
@item @verb{|255|}
@tab @code{byte-constant 63}
@end multitable


@node References
@chapter References

@itemize
@item @uref{http://git.savannah.gnu.org/cgit/emacs.git/tree/src/bytecode.c, Execution of byte code produced by bytecomp.el}
@item @uref{http://git.savannah.gnu.org/cgit/emacs.git/tree/lisp/emacs-lisp/bytecomp.el, bytecomp.el --- compilation of Lisp code into byte code}
@item @uref{http://git.savannah.gnu.org/cgit/emacs.git/tree/src/data.c, data.c --- Primitive operations on Lisp data types}
@item @uref{http://nullprogram.com/blog/2014/01/04/, Emacs Byte-code Internals}
@item @uref{https://www.emacswiki.org/emacs/ByteCodeEngineering, Emacs Wiki ByteCodeEngineering}
@item @uref{https://groups.google.com/forum/#!topic/gnu.emacs.sources/oMfZT_4Oxrc easm.el, Assembler for Emacs' bytecode interpreter}
@item @uref{https://github.com/rocky/elisp-decompile, Emacs Lisp Decompiler}
@end itemize

@node Instruction Index
@unnumbered Instruction Index
@printindex ky

@bye
